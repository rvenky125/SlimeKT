{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \ud83d\ude4b\u200d\u2642\ufe0f \u00b6 Article sharing platform where you can personalize, subscribe to your favourite topics, get daily-read reminders, explore new authors and share your articles . It uses the most cutting edge technology in the frontend and backend part such as Ktor, MongoDB and Jetpack Compose. App Architecture Diagram \u00b6 It follows the recommended app architecture as stated in official Android documentation . Please refer to this page for more information on this topic. Module Graph \u00b6 Repository overview \ud83d\udcc2 \u00b6 SlimeKT has its own backend built with Ktor. The folder /api consists of our backend deployed on Heroku. SlimeKT Android application resides inside of the /app folder. Screenshots \ud83d\udcf1 \u00b6 Home screen Explore Screen Detail Screen Register sheet Subscribe Topics Screen Login sheet Profile Screen (WIP) Home screen with search query Medium Articles \ud83d\udd8b \u00b6 SlimeKT - Kotlin Powered open source project. (Android app with Ktor backend) Android\u2019s IME Actions: Don\u2019t ignore them. Read here Create Animated PlaceHolder for your Jetpack Compose text fields Read here When Jetpack's Glance met his fellow worker, WorkManager (Coming soon) More articles by kasem-sm on Medium. Contact \ud83e\udd19 \u00b6 Direct Messages on My Twitter are always open. If you have any questions related to SlimeKT or Android development, ping me anytime! Credits \ud83d\udc8e \u00b6 Tivi by chrisbanes - A divine project for me to explore. I refer to this project as Gold \ud83e\udd47. Gabor Varadi - He is always willing to answer my questions. A great man and a blessing to the Android community (AKA, the SavedStateHandle preacher). Doris Liu and Manuel Vivo - They always help review my code snippets and add their value to them. Hadi - Assisted me in improving the modularized structure of this project. Marcel - His suggestions helped me to improve the Glance widget.","title":"Home"},{"location":"#introduction","text":"Article sharing platform where you can personalize, subscribe to your favourite topics, get daily-read reminders, explore new authors and share your articles . It uses the most cutting edge technology in the frontend and backend part such as Ktor, MongoDB and Jetpack Compose.","title":"Introduction \ud83d\ude4b\u200d\u2642\ufe0f"},{"location":"#app-architecture-diagram","text":"It follows the recommended app architecture as stated in official Android documentation . Please refer to this page for more information on this topic.","title":"App Architecture Diagram"},{"location":"#module-graph","text":"","title":"Module Graph"},{"location":"#repository-overview","text":"SlimeKT has its own backend built with Ktor. The folder /api consists of our backend deployed on Heroku. SlimeKT Android application resides inside of the /app folder.","title":"Repository overview \ud83d\udcc2"},{"location":"#screenshots","text":"Home screen Explore Screen Detail Screen Register sheet Subscribe Topics Screen Login sheet Profile Screen (WIP) Home screen with search query","title":"Screenshots \ud83d\udcf1"},{"location":"#medium-articles","text":"SlimeKT - Kotlin Powered open source project. (Android app with Ktor backend) Android\u2019s IME Actions: Don\u2019t ignore them. Read here Create Animated PlaceHolder for your Jetpack Compose text fields Read here When Jetpack's Glance met his fellow worker, WorkManager (Coming soon) More articles by kasem-sm on Medium.","title":"Medium Articles \ud83d\udd8b"},{"location":"#contact","text":"Direct Messages on My Twitter are always open. If you have any questions related to SlimeKT or Android development, ping me anytime!","title":"Contact \ud83e\udd19"},{"location":"#credits","text":"Tivi by chrisbanes - A divine project for me to explore. I refer to this project as Gold \ud83e\udd47. Gabor Varadi - He is always willing to answer my questions. A great man and a blessing to the Android community (AKA, the SavedStateHandle preacher). Doris Liu and Manuel Vivo - They always help review my code snippets and add their value to them. Hadi - Assisted me in improving the modularized structure of this project. Marcel - His suggestions helped me to improve the Glance widget.","title":"Credits \ud83d\udc8e"},{"location":"end_notes/","text":"Contact \ud83e\udd19 \u00b6 Direct Messages on My Twitter are always open. If you have any questions related to SlimeKT or Android development, ping me anytime! Contribution Guidelines: \u00b6 There are no special rules for contributing your expertise and making the open-source community more powerful. Just don't forget to file an issue or start a discussion so that I may not be surprised when you create a pull request. Running spotlessApply before creating a pull request would be the cherry on the cake. Credits \ud83d\udc8e \u00b6 Tivi by chrisbanes - A divine project for me to explore. I refer to this project as Gold \ud83e\udd47. Gabor Varadi - He is always willing to answer my questions. A great man and a blessing to the Android community (AKA, the SavedStateHandle preacher). Doris Liu and Manuel Vivo - They always help review my code snippets and add their value to them. Hadi - Assisted me in improving the modularized structure of this project. Marcel - His suggestions helped me to improve the Glance widget. License \u00b6 Copyright 2022 Kasem SM Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"End Notes"},{"location":"end_notes/#contact","text":"Direct Messages on My Twitter are always open. If you have any questions related to SlimeKT or Android development, ping me anytime!","title":"Contact \ud83e\udd19"},{"location":"end_notes/#contribution-guidelines","text":"There are no special rules for contributing your expertise and making the open-source community more powerful. Just don't forget to file an issue or start a discussion so that I may not be surprised when you create a pull request. Running spotlessApply before creating a pull request would be the cherry on the cake.","title":"Contribution Guidelines:"},{"location":"end_notes/#credits","text":"Tivi by chrisbanes - A divine project for me to explore. I refer to this project as Gold \ud83e\udd47. Gabor Varadi - He is always willing to answer my questions. A great man and a blessing to the Android community (AKA, the SavedStateHandle preacher). Doris Liu and Manuel Vivo - They always help review my code snippets and add their value to them. Hadi - Assisted me in improving the modularized structure of this project. Marcel - His suggestions helped me to improve the Glance widget.","title":"Credits \ud83d\udc8e"},{"location":"end_notes/#license","text":"Copyright 2022 Kasem SM Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"android/features/ft_article/","text":"Overview \u00b6 Users can search for articles and filter them according to their favorite author or any topic they like. Custom Implementation: Article Detail Screen Supports Text Markdown such as displaying quotes, code blocks, and many more. Daily Read Reminder notification and widget: Users get a notification to read an article every 24 hours. If the user is authenticated and has subscribed to any topics of their choice, the server will pick a random article from their subscription. If the user is unauthenticated, the server will pick any random article. Article once shown for Daily Read would not be shown again (verified on the client-side). The app's widget also displays the article selected for the Daily Read. Clicking the Daily Read notification would open the respective article. Demo \u00b6 Something went wrong Article List and Detail View Demo Screenshots \u00b6 Detail Screen Detail Screen (Dark) Article List Screen Article List Screen (Dark)","title":"Article"},{"location":"android/features/ft_article/#overview","text":"Users can search for articles and filter them according to their favorite author or any topic they like. Custom Implementation: Article Detail Screen Supports Text Markdown such as displaying quotes, code blocks, and many more. Daily Read Reminder notification and widget: Users get a notification to read an article every 24 hours. If the user is authenticated and has subscribed to any topics of their choice, the server will pick a random article from their subscription. If the user is unauthenticated, the server will pick any random article. Article once shown for Daily Read would not be shown again (verified on the client-side). The app's widget also displays the article selected for the Daily Read. Clicking the Daily Read notification would open the respective article.","title":"Overview"},{"location":"android/features/ft_article/#demo","text":"Something went wrong Article List and Detail View Demo","title":"Demo"},{"location":"android/features/ft_article/#screenshots","text":"Detail Screen Detail Screen (Dark) Article List Screen Article List Screen (Dark)","title":"Screenshots"},{"location":"android/features/ft_authentication/","text":"Overview \u00b6 Implemented proper navigation flow as guided by the official Android documentation. As soon as the authentication state changes: User subscribed topics get cleared from the cache. Every visible screen gets refreshed with updated data. User's confidential data, such as passwords and unique tokens, is encrypted on the server as well as on the client-side. Proper username and password validation, again on the server as well as on the client-side. Users can opt-in to whether they want to be displayed to other users in the explore section while registering themselves. Authentication is only required to personalize the app's content. Demo \u00b6 Something went wrong Authentication Demo","title":"Authentication"},{"location":"android/features/ft_authentication/#overview","text":"Implemented proper navigation flow as guided by the official Android documentation. As soon as the authentication state changes: User subscribed topics get cleared from the cache. Every visible screen gets refreshed with updated data. User's confidential data, such as passwords and unique tokens, is encrypted on the server as well as on the client-side. Proper username and password validation, again on the server as well as on the client-side. Users can opt-in to whether they want to be displayed to other users in the explore section while registering themselves. Authentication is only required to personalize the app's content.","title":"Overview"},{"location":"android/features/ft_authentication/#demo","text":"Something went wrong Authentication Demo","title":"Demo"},{"location":"android/features/ft_topics/","text":"Overview \u00b6 Users can categorize and filter lists of articles using topics. Users can subscribe to their favorite topics to personalize their home screen content. Demo \u00b6 Something went wrong Subscribing Topics Demo","title":"Topics"},{"location":"android/features/ft_topics/#overview","text":"Users can categorize and filter lists of articles using topics. Users can subscribe to their favorite topics to personalize their home screen content.","title":"Overview"},{"location":"android/features/ft_topics/#demo","text":"Something went wrong Subscribing Topics Demo","title":"Demo"},{"location":"android/features/misc/","text":"Tech Stack \u00b6 Kotlin: Official Programming Language for Android. Jetpack Compose: Jetpack Compose is Android\u2019s modern toolkit for building native UI. Kotlin Coroutines: A concurrency design pattern. On Android, coroutines help to manage long-running tasks that might otherwise block the main thread and cause your app to become unresponsive. Kotlin Flows: In coroutines, a flow is a type that can emit multiple values sequentially. Room Database: The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite. Ktor Client: Ktor includes a multiplatform asynchronous HTTP client, which allows you to make requests and handle responses in the Kotlin way. Coil: An image loading library for Android backed by Kotlin Coroutines. Dagger Hilt: A dependency injection library for Android that reduces the boilerplate of doing manual dependency injection. Accompanist: A collection of extension libraries for Jetpack Compose. Work Manager: The recommended solution for persistent work such as immediate or long-running tasks Glance: Build widget layouts for remote surfaces using a Jetpack Compose-style API. Other Features \u00b6 Observer Pattern: Data from the cache would be shown while new data is fetched from the server. The data on the screen gets updated immediately once new data is cached (Hot Flow). Parallel API Requests: While subscribing to multiple topics at once, the app sends a parallel API request to the server for faster execution of the task. (The requests are independent of one another.) Prioritize Recent Request: Any ongoing requests get canceled once a new request is made (for example, if a user filters the article list with the topic \"a\" and then immediately wishes to filter the list with topic \"b\"). IME Action: SlimeKT uses the keyboard's IME Action wherever possible for the best user experience. WorkManager Use case: App uses WorkManager API to update user's subscriptions and to fetch Daily Read articles. AndroidX Glance Use case: Daily Read Widget with the power of Jetpack Compose. Composition Local: To provide different font styles to Composable. UI Sate: SlimeKT combines various flows to construct a UI state. Lightweight modules: Every module is as small as possible and is only responsible for the given task. Dark Mode and Material You: SlimeKT supports dark mode as well as Material You. The color of the app changes according to the user's wallpaper.","title":"Miscellaneous"},{"location":"android/features/misc/#tech-stack","text":"Kotlin: Official Programming Language for Android. Jetpack Compose: Jetpack Compose is Android\u2019s modern toolkit for building native UI. Kotlin Coroutines: A concurrency design pattern. On Android, coroutines help to manage long-running tasks that might otherwise block the main thread and cause your app to become unresponsive. Kotlin Flows: In coroutines, a flow is a type that can emit multiple values sequentially. Room Database: The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite. Ktor Client: Ktor includes a multiplatform asynchronous HTTP client, which allows you to make requests and handle responses in the Kotlin way. Coil: An image loading library for Android backed by Kotlin Coroutines. Dagger Hilt: A dependency injection library for Android that reduces the boilerplate of doing manual dependency injection. Accompanist: A collection of extension libraries for Jetpack Compose. Work Manager: The recommended solution for persistent work such as immediate or long-running tasks Glance: Build widget layouts for remote surfaces using a Jetpack Compose-style API.","title":"Tech Stack"},{"location":"android/features/misc/#other-features","text":"Observer Pattern: Data from the cache would be shown while new data is fetched from the server. The data on the screen gets updated immediately once new data is cached (Hot Flow). Parallel API Requests: While subscribing to multiple topics at once, the app sends a parallel API request to the server for faster execution of the task. (The requests are independent of one another.) Prioritize Recent Request: Any ongoing requests get canceled once a new request is made (for example, if a user filters the article list with the topic \"a\" and then immediately wishes to filter the list with topic \"b\"). IME Action: SlimeKT uses the keyboard's IME Action wherever possible for the best user experience. WorkManager Use case: App uses WorkManager API to update user's subscriptions and to fetch Daily Read articles. AndroidX Glance Use case: Daily Read Widget with the power of Jetpack Compose. Composition Local: To provide different font styles to Composable. UI Sate: SlimeKT combines various flows to construct a UI state. Lightweight modules: Every module is as small as possible and is only responsible for the given task. Dark Mode and Material You: SlimeKT supports dark mode as well as Material You. The color of the app changes according to the user's wallpaper.","title":"Other Features"},{"location":"api/article/get_all_articles/","text":"GET api/article/all Fetches all the articles in paged form. Parameter Type Description Required Default Value topic string Filter article by the given topic \ud83d\udc4e Empty query string Filter article by the given query \ud83d\udc4e Empty { \"success\": true, \"additionalMessage\": null, \"data\": { \"articles\": [ { \"title\": \"I use an outdated iPhone 12\", \"description\": \"Does it really matters? *I guess __no__*\", \"featuredImage\": \"https://images.pexels.com/photos/10768569/pexels-photo-10768569.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\", \"author\": \"Kasem S.M\", \"topic\": \"iOS\", \"timestamp\": 1644302818957, \"id\": 1644302818 } ] } }","title":"Get All Articles"},{"location":"api/article/get_article_by_id/","text":"GET api/article/get Fetches the article with the given ID. Parameter Type Description Required id string The unique ID of the article \ud83d\udc4d { \"success\": true, \"additionalMessage\": null, \"data\": { \"title\": \"Not so fancy way of writing websites\", \"description\": \"Here maybe a long description. This may support an inline code like `code`\", \"featuredImage\": \"https://miro.medium.com/max/1152/1*D0wmwNaatVN9_hxYn7eflA.png\", \"author\": \"Unknown\", \"topic\": \"Web\", \"timestamp\": 1640668386898, \"id\": 1640386898 } }","title":"Get Article By Id"},{"location":"api/article/get_articles_in_explore/","text":"GET api/article/explore Fetches four articles from any topic that has not yet been subscribed to by the user. { \"success\": true, \"additionalMessage\": null, \"data\": [ { \"title\": \"I use an outdated iPhone 12\", \"description\": \"Does it really matters? *I guess __no__*\", \"featuredImage\": \"https://images.pexels.com/photos/10768569/pexels-photo-10768569.jpeg?auto=compress&\", \"author\": \"Kasem S.M\", \"topic\": \"iOS\", \"timestamp\": 1644302818957, \"id\": 1644302818 }, ] }","title":"Get Articles In Explore"},{"location":"api/article/get_daily_read_article/","text":"GET api/article/get/random Fetches a random article from the user's subscription to be shown as the Daily Read. If the user is not authenticated or has not yet subscribed to topics, a random article would be fetched. It is the responsibility of the client to make sure that repeated articles are not shown in the Daily Read. { \"success\": true, \"additionalMessage\": null, \"data\": { \"title\": \"Kotlin Flows vs RX. Too debatable topic, let's dicuss them.\", \"description\": \"Flow is the Kotlin type that can be used to model streams of data. \\nJust like LiveData and RxJava streams, Flow lets you implement the observer pattern: a software design pattern that consists of an object (a.k.a. observable, producer, source, emitter) that maintains a list of its dependents, called observers (subscribers, collectors, receivers, etc.), and notifies them automatically of any state changes. This terminology is used interchangeably throughout this article depending on the context, but those terms always refer to the same two entities.\", \"featuredImage\": \"https://miro.medium.com/max/1400/1*Ab9qskEuQtdigd7SYcx5CA.jpeg\", \"author\": \"Unknown\", \"topic\": \"Android\", \"timestamp\": 1640667227843, \"id\": 1606672784 } }","title":"Get Daily Read Article"},{"location":"api/article/post_article/","text":"POST api/article/create \ud83d\udd10 Header Key Header Value Authorization Bearer Token ` It creates a new article provided that the user is authenticated. If the user passes a topic name that doesn't exist, the server will automatically create a new topic with that name. Currently the POST article route is disabled in production to avoid abuse. Create Request: { \"title\": \"the title of your article\", \"description\": \"long __description__ that supports *markdown*\", \"featuredImage\": \"thumbnail_img_url.jpg\", \"author\": \"writer's name\", \"topic\": \"topic/category name\" }","title":"Post New Article"},{"location":"api/auth/get_authentication_status/","text":"GET /api/auth/authenticate \ud83d\udd10 Parameter Type Description Required userId string The Current User ID \ud83d\udc4e It verifies if the user still exists in our database. { \"success\": true, \"additionalMessage\": null, \"data\": true/false }","title":"Get Authentication Status"},{"location":"api/auth/get_random_user/","text":"GET api/auth/randomAuthor \ud83d\udd10 Header Key Header Value Authorization Bearer Token ` Fetches a random author to be displayed in the Explore section. { \"success\": true, \"additionalMessage\": null, \"data\": { \"username\": \"jerry_the_author\", \"id\": \"484831\" } }","title":"Get Random Author"},{"location":"api/auth/post_login_register/","text":"Register a new user \u00b6 POST api/auth/register Parameter Type Description Required username string Your username \ud83d\udc4d password string Your password \ud83d\udc4d discoverable 0 or 1 Account discoverable to other users \ud83d\udc4d Login an existing user \u00b6 POST api/auth/login Parameter Type Description Required username string Registered username \ud83d\udc4d password string Registered password \ud83d\udc4d { \"success\": true, \"additionalMessage\": null, \"data\": { \"userId\": \"123456\", \"username\": \"jhon\", \"token\": \"09876543210987654321\" } }","title":"Login/Register Route"},{"location":"api/auth/post_login_register/#register-a-new-user","text":"POST api/auth/register Parameter Type Description Required username string Your username \ud83d\udc4d password string Your password \ud83d\udc4d discoverable 0 or 1 Account discoverable to other users \ud83d\udc4d","title":"Register a new user"},{"location":"api/auth/post_login_register/#login-an-existing-user","text":"POST api/auth/login Parameter Type Description Required username string Registered username \ud83d\udc4d password string Registered password \ud83d\udc4d { \"success\": true, \"additionalMessage\": null, \"data\": { \"userId\": \"123456\", \"username\": \"jhon\", \"token\": \"09876543210987654321\" } }","title":"Login an existing user"},{"location":"api/subscribption/get_all_explore_topics/","text":"GET api/subscriptionService/explore Fetches all the unsubscribed topics of the current user. If userId is null, the request will redirect to the Get All Topics route. Parameter Type Description Required Default Value userId string The Current User ID \ud83d\udc4e null { \"success\": true, \"additionalMessage\": null, \"data\": [ { \"name\": \"Politics\", \"totalSubscribers\": 1, \"hasUserSubscribed\": false, \"timestamp\": 1642217005570, \"id\": \"61e23e2ddd9010680bc12ebd\" }, { \"name\": \"Animation\", \"totalSubscribers\": 1, \"hasUserSubscribed\": false, \"timestamp\": 1642300794226, \"id\": \"61e3857af680350cc7e66bc4\" }, { \"name\": \"Science\", \"totalSubscribers\": 1, \"hasUserSubscribed\": false, \"timestamp\": 1642217010923, \"id\": \"61e23e32dd9010680bc12ebf\" }, ] }","title":"Get All Explore Topics"},{"location":"api/subscribption/get_all_subscribed_topics/","text":"GET api/subscriptionService/all Fetches all the \"subscribed** topics of the current user. If userId is null, an empty list would be retrieved. Parameter Type Description Required Default Value userId string The Current User ID \ud83d\udc4e null { \"success\": true, \"additionalMessage\": null, \"data\": [ { \"name\": \"iOS\", \"totalSubscribers\": 1, \"hasUserSubscribed\": true, \"timestamp\": 1642217005570, \"id\": \"61e23e2ddd9010680bc12ebd\" }, { \"name\": \"Technology\", \"totalSubscribers\": 1, \"hasUserSubscribed\": true, \"timestamp\": 1642300794226, \"id\": \"61e3857af680350cc7e66bc4\" }, { \"name\": \"Web\", \"totalSubscribers\": 1, \"hasUserSubscribed\": true, \"timestamp\": 1642217010923, \"id\": \"61e23e32dd9010680bc12ebf\" }, ] }","title":"Get All Subscribed Topics"},{"location":"api/subscribption/subscribe_if_not/","text":"POST api/subscriptionService/subscribeIfNot \ud83d\udd10 Header Key Header Value Authorization Bearer Token ` Parameter Type Description Required topicId string The unique ID of the topic to subscribe \ud83d\udc4d Subscribe to the topic if the user has not. If the user has already subscribed, the API will unsubscribe them from the topic. { \"success\": true, \"additionalMessage\": \"Subscribed\", \"data\": \"61e23909ece7d77eacfd9c2d\" // The topicID }","title":"Subscribe To Topic"},{"location":"api/topics/get_all_topics/","text":"GET api/topic/all Fetches all the article's topics available in the database. { \"success\": true, \"additionalMessage\": null, \"data\": [ { \"name\": \"iOS\", \"totalSubscribers\": 1, \"timestamp\": 1642217005570, \"id\": \"61e23e2ddd9010680bc12ebd\" }, { \"name\": \"Android\", \"totalSubscribers\": 1, \"timestamp\": 1642215689612, \"id\": \"61e23909ece7d77eacfd9c2d\" } ] }","title":"Get All Topics"},{"location":"api/topics/get_topic_by_id/","text":"GET api/topic/get Fetches the article topic with the id given in the parameters. If the userId exists in the parameters, the server will scan and include hasUserSubscribed boolean that indicates whether the current user has subscribed to that topic or not. Parameter Type Description Required id string The unique ID of the article \ud83d\udc4d userId string Current user ID \ud83d\udc4e { \"success\": true, \"additionalMessage\": null, \"data\": { \"name\": \"iOS\", \"totalSubscribers\": 1, \"timestamp\": 1642217005570, \"id\": \"61e23e2ddd9010680bc12ebd\", \"hasUserSubscribed\": false } }","title":"Get Topic By Id"},{"location":"guide/app_architecture/","text":"SlimeKT follows the MVVM Architecture. Every screen in our app follows the below mentioned model. UI Layer \u00b6 Screen \u00b6 Every screen in the app is tied to a viewModel . The screen composable collects data from the viewModel and provides it to our screen content which is a stateless composable. UI-related events such as navigation and displaying messages to the user are performed by this composable. Screen Content - A Stateless Composable \u00b6 As the name states, this part contains the actual content of our screen, such as Button , LazyList , Text Composable , etc. This Composable is stateless. The main aim of creating a separate composable that is stateless is to allow easier testing. ViewModel \u00b6 The viewModel exposes uiEvent and uiState and some public functions. uiEvent is a SharedFlow that is used to fire off one-time events such as triggering navigation or showing a message to the user. uiState is constructed by combining various Flows to update the state of the screen. The viewModel takes domain layer classes such as Interactors and Observers as a dependencies for it. Domain Layer \u00b6 Interactors \u00b6 -- Work In Progress -- \u00b6","title":"App Architecture"},{"location":"guide/app_architecture/#ui-layer","text":"","title":"UI Layer"},{"location":"guide/app_architecture/#screen","text":"Every screen in the app is tied to a viewModel . The screen composable collects data from the viewModel and provides it to our screen content which is a stateless composable. UI-related events such as navigation and displaying messages to the user are performed by this composable.","title":"Screen"},{"location":"guide/app_architecture/#screen-content-a-stateless-composable","text":"As the name states, this part contains the actual content of our screen, such as Button , LazyList , Text Composable , etc. This Composable is stateless. The main aim of creating a separate composable that is stateless is to allow easier testing.","title":"Screen Content - A Stateless Composable"},{"location":"guide/app_architecture/#viewmodel","text":"The viewModel exposes uiEvent and uiState and some public functions. uiEvent is a SharedFlow that is used to fire off one-time events such as triggering navigation or showing a message to the user. uiState is constructed by combining various Flows to update the state of the screen. The viewModel takes domain layer classes such as Interactors and Observers as a dependencies for it.","title":"ViewModel"},{"location":"guide/app_architecture/#domain-layer","text":"","title":"Domain Layer"},{"location":"guide/app_architecture/#interactors","text":"","title":"Interactors"},{"location":"guide/app_architecture/#-work-in-progress-","text":"","title":"-- Work In Progress --"},{"location":"guide/interactors/","text":"Every interactor (use-case) in the project leads to code duplications so we have created Top Level functions which help us to avoid it. Default Interactor \u00b6 This function is used in every interactor (not really a use-case). It returns a flow of type Stage which is a sealed class containing Success and Exception objects. doWork is where we perform fetching and caching of the data. inline fun < T > CoroutineDispatcher . start ( crossinline doWork : suspend () -> T , ): Flow < Stage > { return flow { try { withTimeout ( TimeUnit . MINUTES . toMillis ( 5 )) { doWork . invoke () emit ( Stage . Success ) } } catch ( e : TimeoutCancellationException ) { emit ( Stage . Exception ( e )) } }. catch { throwable -> emit ( Stage . Exception ( throwable )) }. flowOn ( this ) } The usage may look like: fun execute ( articleId : Int ): Flow < Stage > { return dispatchers . default . start { val articleFromApi = api . getArticleById ( articleId ) . getOrThrow () articleFromApi ?. data ?. let { applicationScope . launch { val pair = cache . getRespectivePair ( it . id ) cache . insert ( it . toEntity ( pair )) }. join () } } } It also has a .collect() extension function which is used by our ViewModel to avoid code duplication. /** * [collect] is an extension function which takes in * a loader which helps in showing the progressBar for each execution * and onError lambda gets triggered if any exception is thrown. */ suspend fun Flow < Stage > . collect ( loader : ObservableLoader , onError : suspend ( String ) -> Unit , onSuccess : suspend () -> Unit = { }, ) { loader . start () collectLatest { stage -> when ( stage ) { is Stage . Success -> onSuccess . invoke () is Stage . Exception -> onError . invoke ( stage . throwable . toMessage ) } loader . stop () } }","title":"Interactors"},{"location":"guide/interactors/#default-interactor","text":"This function is used in every interactor (not really a use-case). It returns a flow of type Stage which is a sealed class containing Success and Exception objects. doWork is where we perform fetching and caching of the data. inline fun < T > CoroutineDispatcher . start ( crossinline doWork : suspend () -> T , ): Flow < Stage > { return flow { try { withTimeout ( TimeUnit . MINUTES . toMillis ( 5 )) { doWork . invoke () emit ( Stage . Success ) } } catch ( e : TimeoutCancellationException ) { emit ( Stage . Exception ( e )) } }. catch { throwable -> emit ( Stage . Exception ( throwable )) }. flowOn ( this ) } The usage may look like: fun execute ( articleId : Int ): Flow < Stage > { return dispatchers . default . start { val articleFromApi = api . getArticleById ( articleId ) . getOrThrow () articleFromApi ?. data ?. let { applicationScope . launch { val pair = cache . getRespectivePair ( it . id ) cache . insert ( it . toEntity ( pair )) }. join () } } } It also has a .collect() extension function which is used by our ViewModel to avoid code duplication. /** * [collect] is an extension function which takes in * a loader which helps in showing the progressBar for each execution * and onError lambda gets triggered if any exception is thrown. */ suspend fun Flow < Stage > . collect ( loader : ObservableLoader , onError : suspend ( String ) -> Unit , onSuccess : suspend () -> Unit = { }, ) { loader . start () collectLatest { stage -> when ( stage ) { is Stage . Success -> onSuccess . invoke () is Stage . Exception -> onError . invoke ( stage . throwable . toMessage ) } loader . stop () } }","title":"Default Interactor"},{"location":"guide/observable_loader/","text":"Inspired by ChrisBane's tivi project, Observable Loader exposes a flow of type boolean which returns true when the count is greater than 0. It consists of a start function which increments the counter and stop function which decrements the counter.","title":"Observable Loader"},{"location":"guide/view_state_construction/","text":"Every ViewModel exposes a viewState to the screen which is made by combining various flows. val state : StateFlow < ExploreState > = combine ( loadingStatus . flow , observeLatestArticles . flow , observeInExploreTopics . flow ) { latestArticleLoading , latestArticles , topics -> ExploreState ( isLoading = latestArticleLoading , articles = latestArticles , topics = topics ) }. stateIn ( viewModelScope , ExploreState . EMPTY )","title":"View-State"},{"location":"modules/why_modularization/","text":"So I have been exploring modularization for the past three months, and I know most of you would ask me why I have modularized a small app?. There are hundreds of articles on the internet by fellow developers about the need and benefits of modularization, so I would prefer not to write much about it here. The first answer to it is to gain experience. Other advantages, such as build speed, code reusability, separation of features, Kotlin multi-platform ability, Think of a real-life situation where 10 developers are working on the same project. It would be so much easier if we delegated these developers to work on only a specific module/feature and advised them not to touch any other modules. This has its advantages, such as the decreased possibility of breaking other features while working on any one of them. There would be less merge conflict, etc.","title":"Why Modularization"},{"location":"modules/android/ui_modules/","text":"Common UI Module \u00b6 It contains Jetpack Compose UI components, which are stateless and reusable. Compose Modifier utilities and theme files such as colors and fonts also reside in this module. UI Core Module \u00b6 Contains utilities and classes such as UiEvent, FlowUtils, etc. that are required by every UI Module. Database Module \u00b6 Handles creation and persistence of databases. Task-impl \u00b6 Consists of concrete implementation of 'tas-api' module. Auth-impl \u00b6 Consists of concrete implementation of 'auth-api' module. UI Modules \u00b6 Every screen is a module that contains a screen UI made with Jetpack Compose, the screen's state, and its ViewModel. They are dependent on feature interactors. The ViewModel exposes a (single) view state to the screen.","title":"Android Modules"},{"location":"modules/android/ui_modules/#common-ui-module","text":"It contains Jetpack Compose UI components, which are stateless and reusable. Compose Modifier utilities and theme files such as colors and fonts also reside in this module.","title":"Common UI Module"},{"location":"modules/android/ui_modules/#ui-core-module","text":"Contains utilities and classes such as UiEvent, FlowUtils, etc. that are required by every UI Module.","title":"UI Core Module"},{"location":"modules/android/ui_modules/#database-module","text":"Handles creation and persistence of databases.","title":"Database Module"},{"location":"modules/android/ui_modules/#task-impl","text":"Consists of concrete implementation of 'tas-api' module.","title":"Task-impl"},{"location":"modules/android/ui_modules/#auth-impl","text":"Consists of concrete implementation of 'auth-api' module.","title":"Auth-impl"},{"location":"modules/android/ui_modules/#ui-modules","text":"Every screen is a module that contains a screen UI made with Jetpack Compose, the screen's state, and its ViewModel. They are dependent on feature interactors. The ViewModel exposes a (single) view state to the screen.","title":"UI Modules"},{"location":"modules/feature/feature_module_structure/","text":"Structure \u00b6 Every feature module consists of the following sub-modules: datasource-api: It contains interfaces for cache and network that can be injected into the interactors module. This can also make testing easier. The naming convention of the classes in this module are XFeatureApiService , XFeatureDatabaseService datasource-impl: It contains a concrete implementation of the interface from the data source module. The naming convention of the classes are XFeatureApiServiceImpl , XFeatureDatabaseServiceImpl domain/model: It contains the UI Model class of the feature, which can be provided to feature-common-ui modules or the module where the screen using the feature resides. domain/interactors: It contains use-cases or business logic for the feature. It takes a feature data source as a dependency. Fetching and caching-related tasks are done here. Feature Authentication \u00b6 The authentication feature module consists of one extra module, including all the other modules that a feature module usually contains. They are: worker: This module verifies the user's authentication status periodically and checks if the user still exists in our database or if their token has expired. Feature Article \u00b6 The Article feature module consists of four extra modules, including all the other modules that a feature module usually contains. They are: markdown: It contains all the necessary classes that help in rendering text markdown in the Article Detail Screen. It depends on a third-party library called common mark . widget: It contains all the necessary classes that help in creating a Daily Read widget using the Jetpack Glance API. worker: This module manages the Daily Read feature. It consists of DailyReadManager which fetches articles and shows them as \"Daily Read\" via notification and widget. common-article-ui: It contains common UI components related to article feature such as ArticleCard, which are used on every screen where an article is displayed. Feature Topic \u00b6 A topic feature module consists of one extra module, including all the other modules that a feature module usually contains. They are: worker: This module manages the subscription of topics.","title":"Feature Modules"},{"location":"modules/feature/feature_module_structure/#structure","text":"Every feature module consists of the following sub-modules: datasource-api: It contains interfaces for cache and network that can be injected into the interactors module. This can also make testing easier. The naming convention of the classes in this module are XFeatureApiService , XFeatureDatabaseService datasource-impl: It contains a concrete implementation of the interface from the data source module. The naming convention of the classes are XFeatureApiServiceImpl , XFeatureDatabaseServiceImpl domain/model: It contains the UI Model class of the feature, which can be provided to feature-common-ui modules or the module where the screen using the feature resides. domain/interactors: It contains use-cases or business logic for the feature. It takes a feature data source as a dependency. Fetching and caching-related tasks are done here.","title":"Structure"},{"location":"modules/feature/feature_module_structure/#feature-authentication","text":"The authentication feature module consists of one extra module, including all the other modules that a feature module usually contains. They are: worker: This module verifies the user's authentication status periodically and checks if the user still exists in our database or if their token has expired.","title":"Feature Authentication"},{"location":"modules/feature/feature_module_structure/#feature-article","text":"The Article feature module consists of four extra modules, including all the other modules that a feature module usually contains. They are: markdown: It contains all the necessary classes that help in rendering text markdown in the Article Detail Screen. It depends on a third-party library called common mark . widget: It contains all the necessary classes that help in creating a Daily Read widget using the Jetpack Glance API. worker: This module manages the Daily Read feature. It consists of DailyReadManager which fetches articles and shows them as \"Daily Read\" via notification and widget. common-article-ui: It contains common UI components related to article feature such as ArticleCard, which are used on every screen where an article is displayed.","title":"Feature Article"},{"location":"modules/feature/feature_module_structure/#feature-topic","text":"A topic feature module consists of one extra module, including all the other modules that a feature module usually contains. They are: worker: This module manages the subscription of topics.","title":"Feature Topic"},{"location":"modules/java_kotlin/java_kotlin_modules/","text":"Core Module \u00b6 It consists of core business models, classes, and utilities for all other modules in the project. It doesn't depend on any other modules. Common Test Utils \u00b6 It consists of utilities and helper extension functions used during unit testing. Task-api \u00b6 It consists of interface that is responsible to execute different workers. This is done to avoid providing worker modules directly to any other modules. This module also help us during testing, i.e, we can swap out the worker with a fake Implementation of this interface. Auth-api \u00b6 It consists of interface that is responsible to manage the current authentication session. This can also make testing easier.","title":"Java/Kotlin Modules"},{"location":"modules/java_kotlin/java_kotlin_modules/#core-module","text":"It consists of core business models, classes, and utilities for all other modules in the project. It doesn't depend on any other modules.","title":"Core Module"},{"location":"modules/java_kotlin/java_kotlin_modules/#common-test-utils","text":"It consists of utilities and helper extension functions used during unit testing.","title":"Common Test Utils"},{"location":"modules/java_kotlin/java_kotlin_modules/#task-api","text":"It consists of interface that is responsible to execute different workers. This is done to avoid providing worker modules directly to any other modules. This module also help us during testing, i.e, we can swap out the worker with a fake Implementation of this interface.","title":"Task-api"},{"location":"modules/java_kotlin/java_kotlin_modules/#auth-api","text":"It consists of interface that is responsible to manage the current authentication session. This can also make testing easier.","title":"Auth-api"},{"location":"tests/status/","text":"Unit Tests \u00b6 Currently, unit tests are only written for: Use-cases and Observer \u00b6 GetArticleById GetLatestArticle ObserveArticleById ObserveDailyReadArticle ObserveLatestArticles ViewModels \u00b6 LoginViewModel RegisterViewModel DetailViewModel Instrumentation Tests \u00b6 Currently, instrumentation Tests are only written for: Room Database \u00b6 ArticleDao UI Tests \u00b6 LoginContent","title":"Testing Status"},{"location":"tests/status/#unit-tests","text":"Currently, unit tests are only written for:","title":"Unit Tests"},{"location":"tests/status/#use-cases-and-observer","text":"GetArticleById GetLatestArticle ObserveArticleById ObserveDailyReadArticle ObserveLatestArticles","title":"Use-cases and Observer"},{"location":"tests/status/#viewmodels","text":"LoginViewModel RegisterViewModel DetailViewModel","title":"ViewModels"},{"location":"tests/status/#instrumentation-tests","text":"Currently, instrumentation Tests are only written for:","title":"Instrumentation Tests"},{"location":"tests/status/#room-database","text":"ArticleDao","title":"Room Database"},{"location":"tests/status/#ui-tests","text":"LoginContent","title":"UI Tests"}]}